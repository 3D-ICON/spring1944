#define TAK

piece base, ramp1, ramp2, prop1, prop2,	flag1, flag2, flag3,
	  cargo1, cargo2, turret, grabber, link,
	  wake1, wake2;

#define BASE_SMOKE_PERIOD	40
#define MIN_SMOKE_PERIOD	240

//*********************Ramp
#define RAMP_OPEN_ANGLE			<40>
#define RAMP_OPEN_SPEED			<20>

//*********************Load distance
#define LOAD_DIST				[125]

//*********************Death anim
#define base_LIST_SPEED		<2.5>
#define base_LIST_ANGLE		<-5>

#define RESTORE_PERIOD		2500

#define SIG_DEATH			1
#define SIG_MOVE			2
#define SIG_AIM1			4
#define SIG_AIM2			8
#define SIG_LOAD			16

#define SMOKEPIECE	base

//********************Flag
#define FLAG_FLAP_PERIOD	500
#define FLAG_FLAP_SPEED		<30>
#define FLAG_FLAP_ANGLE		<15>

#include "constants.h"
#include "damageSmoke.h"
static-var	MaxSpeed, bMoving, unit1, unit2, bTooFar, bRampOpen, LastUnloadPoint, boom_len, boom_heading, boom_pitch;

FlagFlap()
{
	while(TRUE)
	{
		turn flag2 to y-axis (0-FLAG_FLAP_ANGLE) speed FLAG_FLAP_SPEED;
		turn flag3 to y-axis FLAG_FLAP_ANGLE speed FLAG_FLAP_SPEED;
		sleep FLAG_FLAP_PERIOD;

		turn flag2 to y-axis FLAG_FLAP_ANGLE speed FLAG_FLAP_SPEED;
		turn flag3 to y-axis (0-FLAG_FLAP_ANGLE) speed FLAG_FLAP_SPEED;
		sleep FLAG_FLAP_PERIOD;
	}
}

WorkingLoop()
{
	while(TRUE)
	{
		if(bMoving)
		{
			// engine smoke comes here. And engine sound.
			sleep 500;
		}
		sleep 500;
	}
}

WaitForConstructionToFinish()
{
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 150;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	// We don't want this to trigger on VERY short stops
	sleep 300;
	bMoving = FALSE;
}

StopCatcher()
{
	var oldXZ, newXZ, newHeading, oldHeading;
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while(TRUE)
	{
		sleep 300;
		newXZ = get PIECE_XZ(base);
		newHeading = get HEADING;
		if((oldXZ == newXZ) && (oldHeading == newHeading))
		{
			call-script StopMoving();
		}
		oldXZ = newXZ;
		oldHeading = newHeading;
	}
}

Create()
{
	bMoving = FALSE;
	MaxSpeed = get MAX_SPEED;
	// we have no cargo yet
	unit1 = -1;
	unit2 = -1;
	call-script WaitForConstructionToFinish();
	start-script DamageSmoke();
	start-script WorkingLoop();
	start-script StopCatcher();
	start-script FlagFlap();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

EmitWakes()
{
	set-signal-mask SIG_MOVE|SIG_DEATH;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

OpenRamp()
{
	var newSpeed;
	// we are opening the ramp, let's slow down (else we'll have the hold full of water)
	newSpeed = MaxSpeed/10;
	//set MAX_SPEED to newSpeed;
	turn ramp1 to x-axis RAMP_OPEN_ANGLE speed RAMP_OPEN_SPEED;
	turn ramp2 to x-axis RAMP_OPEN_ANGLE speed RAMP_OPEN_SPEED;
	wait-for-turn ramp1 around x-axis;
	bRampOpen = TRUE;
	return;
}

CloseRamp()
{
	bRampOpen = FALSE;
	turn ramp1 to x-axis 0 speed RAMP_OPEN_SPEED;
	turn ramp2 to x-axis 0 speed RAMP_OPEN_SPEED;
	wait-for-turn ramp1 around x-axis;
	// now the ramp is closed, we can go full speed again
	//set MAX_SPEED to MaxSpeed;
	return;
}

StartMoving()
{
	signal SIG_MOVE;
	start-script EmitWakes();
	start-script StopCatcher();
	bMoving = TRUE;
}

//Transport stuff
BoomCalc(posxz,posy)
{
	var dxz,dy,lenxz;

	dxz = get PIECE_XZ(turret) - posxz;
	dy = posy - get PIECE_Y(turret);
	lenxz = get XZ_HYPOT(dxz);

	boom_len = get HYPOT(lenxz,dy);
	boom_heading = get XZ_ATAN(dxz);
	boom_pitch = get ATAN(dy,lenxz);
	bTooFar = (boom_len > LOAD_DIST);
}

PositionLink(posxz,posy)
{
	turn turret to y-axis boom_heading now;
	turn grabber to x-axis 0-boom_pitch now;
	move grabber to z-axis boom_len now;
}

ReturnLink()
{
	turn turret to y-axis <0> now;
	turn grabber to x-axis <0> now;
	move grabber to z-axis [0] now;
}

CargoCheck()
//This should check all the carried units and remove any dead ones
{
	var loadxz, unitxz, dist;
	set-signal-mask SIG_LOAD;
	while(TRUE)
	{
		if(unit1>(0-1))
		{
			loadxz = get PIECE_XZ(cargo1);
			unitxz = get UNIT_XZ(unit1);
			dist = get XZ_HYPOT(loadxz - unitxz);
			if((dist > [1])||(dist<[-1]))
			{
				unit1 = -1;
			}
		}
		if(unit2>(0-1))
		{
			loadxz = get PIECE_XZ(cargo2);
			unitxz = get UNIT_XZ(unit2);
			dist = get XZ_HYPOT(loadxz - unitxz);
			if((dist > [1])||(dist<[-1]))
			{
				unit2 = -1;
			}
		}
		sleep 1000;
	}
}

TransportPickup(unitid, fromLua)
{
	var bAlreadyPlaced;
	signal SIG_LOAD;
	set-signal-mask SIG_LOAD;
	bAlreadyPlaced = FALSE;
	if ( fromLua != 1 ) {
    	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid));
		if( bTooFar )
		{
			return (1);
		}
		call-script OpenRamp();
		while (!bRampOpen)
		{
			sleep 250;
		}
	}
	set BUSY to 1;
	//Determine next free unit slot
	if (unit1 == -1)
	{
		attach-unit unitid to cargo1;
		unit1 = unitid;
		bAlreadyPlaced = TRUE;
	} else
	if (unit2 == -1)
	{
		attach-unit unitid to cargo2;
		unit2 = unitid;
		bAlreadyPlaced = TRUE;
	} else
	{
		attach-unit unitid to 0 - 1;
	}
	start-script CargoCheck();
	if ( fromLua != 1 ) {
		sleep 500;
		set BUSY to 0;
		sleep 2500;
		start-script CloseRamp();
	}
}

TransportDrop(unitid, position)
{
	signal SIG_LOAD;
	set-signal-mask SIG_LOAD;
    call-script BoomCalc(position,get GROUND_HEIGHT(position));
	if( bTooFar )
	{
		return (1);
	}
	call-script OpenRamp();
	while (!bRampOpen)
	{
		sleep 250;
	}
	set BUSY to 1;
	attach-unit unitid to link;
	call-script PositionLink();
	sleep 50;
	drop-unit unitid;
//	call-script AreaUnload(unitid,[210.000000]);
	//Determine a unit slot to free
	if (unit1 == unitid)
	{
		unit1 = -1;
	} else
	if (unit2 == unitid)
	{
		unit2 = -1;
	}
	call-script ReturnLink();
	sleep 1000;
	set BUSY to 0;
	sleep 1500;
	start-script CloseRamp();
}

Killed(severity, corpsetype)
{
	signal SIG_DEATH;
	if (severity<99)
	{
		corpsetype = 1;
		start-script OpenRamp();
		turn base to x-axis base_LIST_ANGLE speed base_LIST_SPEED;
		wait-for-turn base around x-axis;
		explode base type		BITMAPONLY;
		return (TRUE);
	}
	corpsetype = 2;
	explode base type		SHATTER;
	return (TRUE);
}